{
  "name": "enhanced-resolve",
  "version": "3.1.0",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "description": "Offers a async require.resolve function. It's highly configurable.",
  "files": [
    "lib"
  ],
  "dependencies": {
    "graceful-fs": "^4.1.2",
    "memory-fs": "^0.4.0",
    "object-assign": "^4.0.1",
    "tapable": "^0.2.5"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "devDependencies": {
    "beautify-lint": "^1.0.3",
    "codecov.io": "^0.1.6",
    "coveralls": "^2.11.6",
    "eslint": "^3.14.1",
    "eslint-plugin-node": "^3.0.5",
    "eslint-plugin-nodeca": "^1.0.3",
    "istanbul": "^0.4.1",
    "js-beautify": "^1.5.10",
    "mocha": "^2.3.4",
    "should": "^8.0.2"
  },
  "engines": {
    "node": ">=4.3.0 <5.0.0 || >=5.10"
  },
  "main": "lib/node.js",
  "homepage": "http://github.com/webpack/enhanced-resolve",
  "scripts": {
    "beautify-lint": "beautify-lint lib/**.js test/*.js",
    "beautify": "beautify-rewrite lib/**.js test/*.js",
    "lint": "eslint lib",
    "pretest": "npm run lint && npm run beautify-lint",
    "test": "mocha --full-trace --check-leaks",
    "precover": "npm run lint && npm run beautify-lint",
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "travis": "npm run cover -- --report lcovonly"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/webpack/enhanced-resolve.git"
  },
  "readme": "# enhanced-resolve\r\n\r\nOffers a async require.resolve function. It's highly configurable.\r\n\r\n## Features\r\n\r\n* plugin system\r\n* provide a custom filesystem\r\n* sync and async node.js filesystems included\r\n\r\n\r\n## Tests\r\n\r\n``` javascript\r\nnpm test\r\n```\r\n\r\n[![Build Status](https://secure.travis-ci.org/webpack/enhanced-resolve.png?branch=master)](http://travis-ci.org/webpack/enhanced-resolve)\r\n\r\n\r\n## Contributing\r\n\r\nTake a look at `lib/ResolveFactory.js` to understand how everything fits together. It provides a `createResolver(options)` function and these are the possible options:\r\n\r\n| Field                    | Default                     | Description                                                                        |\r\n| ------------------------ | --------------------------- | ---------------------------------------------------------------------------------- |\r\n| modules                  | [\"node_modules\"]            | A list of directories to resolve modules from, can be absolute path or folder name |\r\n| descriptionFiles         | [\"package.json\"]            | A list of description files to read from |\r\n| plugins                  | []                          | A list of additional resolve plugins which should be applied |\r\n| mainFields               | [\"main\"]                    | A list of main fields in description files |\r\n| aliasFields              | []                          | A list of alias fields in description files |\r\n| mainFiles                | [\"index\"]                   | A list of main files in directories |\r\n| extensions               | [\".js\", \".json\", \".node\"]   | A list of extensions which should be tried for files |\r\n| enforceExtension         | false                       | Enforce that a extension from extensions must be used |\r\n| moduleExtensions         | []                          | A list of module extsions which should be tried for modules |\r\n| enforceModuleExtension   | false                       | Enforce that a extension from moduleExtensions must be used |\r\n| alias                    | []                          | A list of module alias configurations or an object which maps key to value |\r\n| resolveToContext         | false                       | Resolve to a context instead of a file |\r\n| unsafeCache              | false                       | Use this cache object to unsafely cache the successful requests |\r\n| cachePredicate           | function() { return true }; | A function which decides wheter a request should be cached or not. An object is passed to the function with `path` and `request` properties. |\r\n| fileSystem               |                             | The file system which should be used |\r\n| resolver                 | undefined                   | A prepared Resolver to which the plugins are attached |\r\n\r\nThe options are passed from the `resolve` key of your webpack configuration e.g.:\r\n\r\n```\r\nresolve: {\r\n  extensions: ['', '.js', '.jsx'],\r\n  modules: ['src', 'node_modules'],\r\n  plugins: [new DirectoryNamedWebpackPlugin()]\r\n  ...\r\n},\r\n```\r\n\r\n## License\r\n\r\nCopyright (c) 2012-2016 Tobias Koppers\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/webpack/enhanced-resolve/issues"
  },
  "_id": "enhanced-resolve@3.1.0",
  "_from": "enhanced-resolve@^3.0.0"
}
