package org.nandor.spark;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.util.UTF8ByteArrayUtils;

public class WeighTrainer {
		//Maybe Use Hooke-Jeeves Algorithm
		//https://www.siam.org/books/textbooks/fr18_book.pdf
		private int count = 0;
		private float prevRes = (float) 0.0;
		private int maxStep;
		private double procLim = 0.3;
		Map<String, Double> appWeights = new HashMap<>();
		Map<String, Double> gwWeights = new HashMap<>();

	public  WeighTrainer(int maxStep){
		//Constructor for Class, might be empty, or some constants
		this.maxStep = maxStep;
	}
	
	
	public void correlationResults(Map<String, Double> corrApp, Map<String, Double> corrGw) {
		//Add the correlation results of the attempted tests 
		System.out.println("Correlations:");
		System.out.println(corrApp);
		System.out.println(corrGw);
		//Get Maxes 
		Double appMax = 0.0;
		Double gwMax = 0.0;
		for (String name: corrApp.keySet()){
			if (Math.abs(corrApp.get(name))>appMax){
				appMax = Math.abs(corrApp.get(name));
			}
		}
		for (String name: corrGw.keySet()){
			if (Math.abs(corrGw.get(name))>gwMax){
				gwMax = Math.abs(corrGw.get(name));
			}
		}
		//Apps
		for (String name: corrApp.keySet()){
			if (Math.abs(corrApp.get(name))>appMax*procLim){
				appWeights.put(name, Math.abs(corrApp.get(name)));
			}
		}
		//Gateways
		for (String name: corrGw.keySet()){
			if (Math.abs(corrGw.get(name))>gwMax*procLim){
				gwWeights.put(name, Math.abs(corrGw.get(name)));
			}
		}
		
		//Adjust so that their sum is 1 (why dunno, seems to make sense to me)
		double sum1=0.0;
		for (String name: appWeights.keySet()){
			sum1+=appWeights.get(name);
		}
		for (String name: appWeights.keySet()){
			appWeights.put(name,appWeights.get(name)/sum1);
		}
		double sum2=0.0;
		for (String name: gwWeights.keySet()){
			sum2+=gwWeights.get(name);
		}
		for (String name: gwWeights.keySet()){
			gwWeights.put(name,gwWeights.get(name)/sum2);
		}
	}
	
	public void attemptResult(Float utility) {
		//Insert the value of the solution just attempted
		System.out.println("Utility:");
		if (utility<prevRes){
			setFailed();
		}else{
			prevRes=utility;
		}
		
	}
	
	public boolean getNextStep(){
		//Empty request for the next step, will be reimplemented
		count++;
		if (count>=maxStep){
			return false;
		}else{
			return true;
		}
	}

	public void setFailed() {
		//Triggered when an attemt failed for one reason or another
		maxStep = count;
	}
	
	public String getChar() {
		////Return Characteristics as a string
		return "Count: "+count;
	}

	
	public static void main(String[] args) {
		WeighTrainer w1 = new WeighTrainer(5);
		List<Map<String, Double>> corrApp = new ArrayList<Map<String,Double>>();
		List<Map<String, Double>> corrGw  = new ArrayList<Map<String,Double>>();
		corrApp.add(new HashMap());
		corrGw.add(new HashMap());
		//App
		corrApp.get(0).put("Constraints",0.0349);
		corrApp.get(0).put("RequirementSim",0.002361);
		corrApp.get(0).put("ResourceShare",0.01075);
		corrApp.get(0).put("MessageRate",-0.00127);
		corrApp.get(0).put("UtilityWeights",0.0);
		corrApp.get(0).put("UnitLoad",-0.0071);
		corrApp.get(0).put("Distance",-0.07927);
		//GW
		corrGw.get(0).put("Capabilities",0.0);
		corrGw.get(0).put("SharedRes",0.15986);
		corrGw.get(0).put("PerfToULoad",0.0);
		corrGw.get(0).put("BaseLoad",0.007514);
		corrGw.get(0).put("CapToULoad",0.003785);
		while (w1.getNextStep()){
			System.out.println("Step: "+w1.getChar());
			w1.correlationResults(corrApp.get(0), corrGw.get(0));
			w1.attemptResult((float)10.5);
		}
	}


	public Map<String, Double> appWeights() {
		return appWeights;
	}

	public Map<String, Double> gwWeights() {
		return gwWeights;
	}

}
