/* Copyright (c) 2010 People Power Co.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the People Power Corporation nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
 * PEOPLE POWER CO. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE
 *
 */

#include <stdio.h>
#include <stdint.h>
#include "Timer.h"

module TestP @safe() {
  uses interface Boot;
  uses interface Leds;
  uses interface Timer<TMilli> as Timer0;
   
} implementation {
  uint8_t step=0;
  uint8_t next_num=0;
  //Pi stuff
  uint8_t diameter=5;
  uint8_t circ[22]={15,7,0,7,9,6,3,2,6,7,9,4,8,9,6,6,1,9,2,3,1,3};
  uint8_t remainder[23];
  uint8_t pi[22];
  uint8_t i=0;
  task void calcTask()
  {
  	if (step<22)
  	{
  	 //The nitty gritty of each step
  	 pi[step]=(circ[step]+(remainder[step]*10))/diameter;
  	 remainder[step+1]=circ[step]-diameter*pi[step];
  	 //The post to the next step
  	 step++;
  	 post calcTask();
  	}
  	else
  	{ 
  	step=0;
  	printf("Calc Done");
  	}
  }
  
  event void Boot.booted()  {
      call Leds.led2Toggle();
      call Timer0.startPeriodic( 1000 );
      post calcTask();
  }
  
   event void Timer0.fired()
  {
    printf("Circ:%d.",circ[0]);
    for (i=1; i<22;i++)
    {printf(".%d",circ[i]);}
    printf("\n");
    printf("Rema:%d.",remainder[0]);
    for (i=1; i<23;i++)
    {printf(".%d",remainder[i]);}
    printf("\n");
     printf("Pied:%d.",pi[0]);
    for (i=1; i<22;i++)
    {printf(".%d",pi[i]);}
    printf("\n");
    call Leds.led0Toggle();
  }
  
}
