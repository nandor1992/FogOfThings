/* 
 * Copyright (c) 2007, Technische Universitaet Berlin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * - Neither the name of the Technische Universitaet Berlin nor the names
 *   of its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * - Revision -------------------------------------------------------------
 * $Revision: 1.1 $
 * $Date: 2007-08-01 09:28:58 $
 * @author: Jan Hauer <hauer@tkn.tu-berlin.de>
 * ========================================================================
 */

#include "Msp430Adc12.h"
#include <stdio.h>
#include <stdint.h>
#include "Timer.h"
#include "printfloat.h"
#include "RadioCountToLeds.h"

module AdcSimpleC {
  provides {
    interface AdcConfigure<const msp430adc12_channel_config_t*> as LightConfigure;
  }
  uses {
    interface Boot;
    interface Read<uint16_t> as LightRead;
    interface Leds;
    interface Timer<TMilli> as Timer0;
    interface Receive;
    interface AMSend;
    interface SplitControl as AMControl;
    interface Packet;
  }
}
implementation {

  uint8_t step=0;
  uint16_t sumSense=0;
  uint16_t senseVal=0;
  uint16_t myId=4422;
  float luxAvgSense=0.0;
  message_t packet;
  bool locked;
  
  const msp430adc12_channel_config_t config = {
      inch: INPUT_CHANNEL_A4,
      sref: REFERENCE_VREFplus_AVss,
      ref2_5v: REFVOLT_LEVEL_1_5,
      adc12ssel: SHT_SOURCE_ACLK,
      adc12div: SHT_CLOCK_DIV_1,
      sht: SAMPLE_HOLD_4_CYCLES,
      sampcon_ssel: SAMPCON_SOURCE_SMCLK,
      sampcon_id: SAMPCON_CLOCK_DIV_1
  };

  task void sumSenseTask()
  {
     if (locked) {
      return;
    }
    else {
     if (step<4)
     {
     step++;
     sumSense+=senseVal;
     }else{
     //Send Radio signal of Sum
     	//Butfirst: Calculate Avarage 
     	//After:Calculate Voltage then Current Value based on Wiki: I=Vsense/100.000 and from 
     	//Hamatsu 1087S light sensor the Lux is: 0.625 * 1e6 * I * 1000
     	//Adding these two together to make thing simpler results in the eq
     	//Lux=ADC/4096*1.5*6250 => Lux = ADC*2.28881835
     	//The read value varies at least 1-2 adc points so 2.28881835 is a sufficient gradient to keep with precision
     luxAvgSense=(float)(sumSense/5)*2.28881835;
     printf("Lux Value of Avarage:");
     printfloat(luxAvgSense);
     printf("\n");
     //Now Do all the Radio Stuff
     radio_count_msg_t* rcm = (radio_count_msg_t*)call Packet.getPayload(&packet, sizeof(radio_count_msg_t));
      if (rcm == NULL) {
	return;
      }
      rcn->id=myId;
      rcm->luxSum = luxAvgSense;
      if (call AMSend.send(AM_BROADCAST_ADDR, &packet, sizeof(radio_count_msg_t)) == SUCCESS) {
	dbg("RadioCountToLedsC", "RadioCountToLedsC: packet sent.\n", counter);	
	locked = TRUE;	
     //Zero all the things
     step=0;
     sumSense=0;
     }
  	}
  }

  event void Boot.booted() 
  {
    call Leds.led0On();
    call Leds.led1Off();
    call Leds.led2Off();
    call AMControl.start();
  }

  event void Timer0.fired()
  {
    call LightRead.read();
  }

  event void LightRead.readDone( error_t result, uint16_t val )
  {
    if (result == SUCCESS){
      call Leds.led1On();
      printf("The sensor Read:%d\n",val);
      senseVal=val;
      post sumSenseTask();
    }else{
    printf("Error on ADC Read");
    }
  }

  async command const msp430adc12_channel_config_t* LightConfigure.getConfiguration()
  {
    return &config; // must not be changed
  }
  
    event void AMControl.startDone(error_t err) {
    if (err == SUCCESS) {
        call Timer0.startPeriodic( 300 );
    }
    else {
      call AMControl.start();
    }
  }

  event void AMControl.stopDone(error_t err) {
    // do nothing
  }
  
  event void MilliTimer.fired() {
    counter++;
    dbg("RadioCountToLedsC", "RadioCountToLedsC: timer fired, counter is %hu.\n", counter);
    if (locked) {
      return;
    }
    else {
      radio_count_msg_t* rcm = (radio_count_msg_t*)call Packet.getPayload(&packet, sizeof(radio_count_msg_t));
      if (rcm == NULL) {
	return;
      }
      rcm->counter = counter;
      if (call AMSend.send(AM_BROADCAST_ADDR, &packet, sizeof(radio_count_msg_t)) == SUCCESS) {
	dbg("RadioCountToLedsC", "RadioCountToLedsC: packet sent.\n", counter);	
	locked = TRUE;
      }
    }
  }

  event message_t* Receive.receive(message_t* bufPtr, 
				   void* payload, uint8_t len) {
    dbg("RadioCountToLedsC", "Received packet of length %hhu.\n", len);
    if (len != sizeof(radio_count_msg_t)) {return bufPtr;}
    else {
      radio_count_msg_t* rcm = (radio_count_msg_t*)payload;
      if (rcm->counter & 0x1) {
	call Leds.led0On();
      }
      else {
	call Leds.led0Off();
      }
      if (rcm->counter & 0x2) {
	call Leds.led1On();
      }
      else {
	call Leds.led1Off();
      }
      if (rcm->counter & 0x4) {
	call Leds.led2On();
      }
      else {
	call Leds.led2Off();
      }
      return bufPtr;
    }
  }

  event void AMSend.sendDone(message_t* bufPtr, error_t error) {
    if (&packet == bufPtr) {
      locked = FALSE;
    }
  }
  
}
