/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.karaf.event_create;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.commons.collections.iterators.ArrayListIterator;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;
import org.osgi.framework.Constants;
import org.osgi.framework.ServiceRegistration;
import org.osgi.service.cm.ConfigurationException;
import org.osgi.service.cm.ManagedService;
import org.osgi.service.event.Event;
import org.osgi.service.event.EventConstants;
import org.osgi.service.event.EventHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.rabbitmq.client.*;
import com.rabbitmq.client.impl.AMQBasicProperties;

public class Activator implements BundleActivator, EventHandler {
	
	private static BundleContext bcontext = null;
	private static final String DEVICE_QUEUE = "device/send";
	private static final String CLOUD_QUEUE = "cloud/send";
	private static final String REGION_QUEUE = "region/send";
	private static final String RESOURCE_QUEUE="resource/send";
	private static final String APP_REC_QUEUE = "app/receive";
	private static final String APP_SEND_QUEUE = "app/send";
	private static String CONFIG_PID = "org.karaf.messaging";
	private List <ServiceRegistration> register = new ArrayList<ServiceRegistration>();
	private static Connection connection;
	private static Channel channel;
	private static boolean configured=false;
	private List<String> send_apps = new ArrayList<String>();
	private List<String> rec_apps = new ArrayList<String>();
	private Timer timer = new Timer();
	private Monitor m1 = new Monitor();
	static Logger logger;
	
	private class Monitor{
		
		private Map<String, Integer>  device = new Hashtable();
		private Map<String, Integer>  cloud = new Hashtable();
		private Map<String, Integer>  resource = new Hashtable();
		private Map<String, Integer>  region = new Hashtable();
		private Map<String, Integer>  apps = new Hashtable();

		public String hashToJson(){
			String totString="{";
			totString="'device':"+returnVars(device)+",";
			totString=totString+"'cloud':"+returnVars(cloud)+",";
			totString=totString+"'region':"+returnVars(region)+",";
			totString=totString+"'resource':"+returnVars(resource)+",";
			totString=totString+"'apps':"+returnVars(apps)+"}";
			return totString;
		}
		
		public String returnVars(Map<String, Integer>  map)
		{
			if( map.size()==0){
				return "{}";
			}else{
			String ret="{";
			for (Map.Entry<String, Integer> entry : map.entrySet()) {
				ret=ret.concat("'"+entry.getKey()+"':'"+entry.getValue()+"',");
			}	
			ret=ret.substring(0, ret.lastIndexOf(","))+"}";
			return ret;
			}
		}
		
		public void resolveAdd(String topic, String app, String dev)
		{
			String[] parts = topic.split("/");
			if (parts[0].equals("device"))
			{
				if (parts.length==3){
					addElement("device", parts[2]);
				}
				if (app!=null){
					addElement("device", app);
					addElement("device", dev);
				}
			}else if (parts[0].equals("app")){
				if (parts.length==3){
					if (parts[2].equals(app)){
						addElement("apps", app);}
					else{
						addElement("apps", app);
						addElement("apps", parts[2]);
					}
				}else{addElement("apps",app);}
			}else{
				if (parts.length==3){
					addElement(parts[0],parts[2]);
				}
				else
				{
					addElement("apps", app);
				}
			}
		}
		
		public void clear()
		{
			device.clear();
			cloud.clear();
			resource.clear();
			region.clear();
			apps.clear();
		}
		private void addElement(String type,String app_dev)
		{
			
			if (type.equals("device")){
				if (device.get(app_dev)==null)
					device.put(app_dev, 1);
				else
					device.put(app_dev, device.get(app_dev));
			}
			if (type.equals("cloud")){
				if (cloud.get(app_dev)==null)
					cloud.put(app_dev, 1);
				else
					cloud.put(app_dev, cloud.get(app_dev));
			}
			if (type.equals("resource")){
				if (resource.get(app_dev)==null)
					resource.put(app_dev, 1);
				else
					resource.put(app_dev, resource.get(app_dev));
			};
			if (type.equals("region")){
				if (region.get(app_dev)==null)
					region.put(app_dev, 1);
				else
					region.put(app_dev, region.get(app_dev));
			}
			if (type.equals("apps")){
				if (apps.get(app_dev)==null)
					apps.put(app_dev, 1);
				else
					apps.put(app_dev, apps.get(app_dev));
			}
		}	
	}
	
	public class TimerTsk extends TimerTask {	
	    public void run(){
	    	publishMsg();
	    }
	}
	
	public void start(BundleContext context) throws Exception {
		bcontext=context;
		Dictionary props = new Hashtable();
		logger = LoggerFactory.getLogger(Activator.class.getName());
		Dictionary cp = new Hashtable();
		cp.put(EventConstants.EVENT_TOPIC, CLOUD_QUEUE);
		Dictionary dp = new Hashtable();
		dp.put(EventConstants.EVENT_TOPIC, DEVICE_QUEUE);
		Dictionary rsp = new Hashtable();
		rsp.put(EventConstants.EVENT_TOPIC, RESOURCE_QUEUE);
		Dictionary rgp = new Hashtable();
		rgp.put(EventConstants.EVENT_TOPIC, REGION_QUEUE );
		Dictionary app_s = new Hashtable();
		app_s.put(EventConstants.EVENT_TOPIC, APP_SEND_QUEUE+"/*" );
		Dictionary app_r = new Hashtable();
		app_r.put(EventConstants.EVENT_TOPIC, APP_REC_QUEUE+"/*" );
		// AMQP Stuff
		ConnectionFactory factory = new ConnectionFactory();
		factory.setUsername("admin");
		factory.setPassword("hunter");
		factory.setVirtualHost("test");
		factory.setHost("localhost");
		factory.setPort(5672);
		connection = factory.newConnection();
		channel = connection.createChannel();
		ServiceRegistration sr;
		sr = context.registerService(EventHandler.class.getName(), this, dp);
		register.add(sr);
		sr = context.registerService(EventHandler.class.getName(), this, cp);
		register.add(sr);
		sr = context.registerService(EventHandler.class.getName(), this, rsp);
		register.add(sr);
		sr = context.registerService(EventHandler.class.getName(), this, rgp);
		register.add(sr);
		sr = context.registerService(EventHandler.class.getName(), this, app_s);
		register.add(sr);
		sr = context.registerService(EventHandler.class.getName(), this, app_r);
		register.add(sr);
		
		timer.scheduleAtFixedRate(new TimerTsk(), 600000, 600000);
		logger.warn("Started Logging!");
	}

	public void publishMsg()
	{
		AMQP.BasicProperties.Builder builder = new AMQP.BasicProperties().builder();
		try {
			logger.warn("Published Log with"+m1.hashToJson());
			channel.basicPublish("monitor", "", builder.build(), m1.hashToJson().getBytes());
			m1.clear();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public void handleEvent(Event event) {
		String type = event.getProperty("event.topics").toString();
		String app =(String) event.getProperty("app");
		String device =(String) event.getProperty("device");
		logger.warn("Event"+type+" "+app+" "+device);
		m1.resolveAdd(type, app, device);
	}
	
	public void stop(BundleContext context) throws Exception {
		register.unregister();
		register2.unregister();
		register3.unregister();
		register4.unregister();
		register5.unregister();
		register6.unregister();
		timer.cancel();
		channel.close();
		connection.close();
		logger.warn("Stopped EventAdmin to AMQP");
	}


}
