package org.nandor.spark;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.Timer;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaSparkContext;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import scala.collection.mutable.HashMap;

public class Testing {

	public static JSONObject readJson(String file) {
		JSONParser parser = new JSONParser();
		JSONObject a = new JSONObject();
		try {
			a = (JSONObject) parser.parse(new FileReader(file));
		} catch (IOException | ParseException e) {
			e.printStackTrace();
		}
		return a;
	}

	public static void writeJson(String file, JSONObject json) {
		FileWriter f;
		try {
			f = new FileWriter(file);
			f.write(json.toJSONString());
			f.flush();
			f.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	
	public static void fullRun() {
		//Read from exported File
		//Fog f=Exporter.readJsonFog(readJson("C:/Users/Nandor/Documents/FogOfThings/Gateway Apps/spark-test/src/main/java/org/nandor/spark/deploy-W.json"));

		//Generate New Fog
		//Fog f = Methods.InitFog(100, 0);//Old
		Fog f = Methods.InitDelayFog(120);
		//Fog f = Methods.InitMultiFog(40);
		//Fog f = Methods.InitReqFog(40);
		
		//Optimization Section
		//Methods.GAGlobal(f);
		//Methods.DistanceClusteringDeployment(f);
		Methods.SampleWeDiCOptimization(f);
		//Methods.InitWeDiCOptimization(f);
		//Methods.RandomDeployment(f);
		
		//Set Deplopyment and leave best as current
		//Map<Integer, Integer> best = Methods.SampleWeDiCOptimization(f,12);
		//f.setDeplpyment(best);
		//f.deployFog();
		
		//Write Results to File
		//writeJson("C:/Users/Nandor/Documents/FogOfThings/Gateway Apps/spark-test/src/main/java/org/nandor/spark/deploy-W.json",Exporter.writeJsonFog(f));
	}
	
	public static void runGAValid(){
		Methods.GAPopSizeEvaluation(3);
		Methods.GAStopCondEvaluation(1);
		Methods.ClustSizeEvaluation(1);
	}
	
	public static void scalabilityRun() {
		int size = 20; //Size
		int sceType = 1; //Scenario Type 1-Delay 2-Multi 3-Capab
		int meType = 0; //MethodType //0Everything//1Ga//2Dist//3Samp//4Ini//5Random
		int count = 2; //Iter Count
		Methods.ScalabilityAnalysis(size,count,sceType,meType);
	}
	
	public static void performanceRun() {
		Methods.PerformanceAnalysis(20,1,0);
		//1Ga//2Dist//3Samp//4Ini//5Random
	}
	public static void main (String[] args) {	
		//fullRun();
		//runGAValid();
		//performanceRun();
		scalabilityRun();
		
	}
	
}
