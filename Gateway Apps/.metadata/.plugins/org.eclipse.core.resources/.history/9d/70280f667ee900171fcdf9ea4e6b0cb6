package org.nandor.spark;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class Cluster {
	private String name;
	private Map<Integer, App> apps;
	private Map<Integer, Gateway> gateways;
	private Map<Integer, Float> gatewayShare;
	private Map<Integer,Float> shareLoad;
	private int id;
	private Map<Integer,Integer> deployment;

	private static final AtomicInteger count = new AtomicInteger(0);
	
	
	// Initialization
	public Cluster(String name) {
		this.name = name;
		apps = new HashMap<>();
		gateways = new HashMap<>();
		gatewayShare = new HashMap<>();
		shareLoad = new HashMap<>();
		deployment = new HashMap<>();
		this.id = count.incrementAndGet();
	}


	//Get App Info
	public Float getClusterCompoundUtility(){
		float util=(float)0.0;
		for (Integer a: getApps().keySet()){
			util+=getApps().get(a).getAppUtility();
		}
		return util;
	}
	public Float getClusterCompoundDelay(){
		float del=(float)0.0;
		for (Integer a: getApps().keySet()){
			del+=getApps().get(a).getTotDelay();
		}
		return del;
	}
	public Float getClusterCompoundReliability(){
		float rel=(float)0.0;
		for (Integer a: getApps().keySet()){
			rel+=getApps().get(a).getAppReliability();
		}
		return rel;
	}
	
	//Verify Validity of Deployment
	public boolean verifyIndValidity(){
		for (Integer g: this.getGateways().keySet()){
			Gateway gate = this.gateways.get(g);
			Float load = gate.getGwBaseLoad()+gate.getClusterShare(this.getId());
			//System.out.println("Validity: "+gate.getGwLoad()+" Load: "+load);
			if (gate.getGwLoad()>load){
				return false;
			}
		}
		return true;
	}
	
	//Compute Stuff
	public Float getClusterLoad(){
		Float totL=(float)0.0;
		for( Integer a : apps.keySet()){
			totL+=apps.get(a).getAppLoad((float)1.0);			
		}
		return totL;
	}
	
	
	
	//Add Stuff
	public Map<Integer, Integer> getDeployment() {
		return deployment;
	}
	public void setDeployment(Map<Integer, Integer> deployment) {
		this.deployment = deployment;
	}
	
	public void clearGateways()
	{
		this.gateways=new HashMap<>();
		this.gatewayShare = new HashMap<>();
	}
	
	public void addGateway(Gateway gateway,Float share,Float load) {
		this.gateways.put(gateway.getId(), gateway);
		this.gatewayShare.put(gateway.getId(), share);
		this.shareLoad.put(gateway.getId(), load);
	}

	public void addGateway(Gateway gateway) {
		this.gateways.put(gateway.getId(), gateway);
		this.gatewayShare.put(gateway.getId(),(float)0.0);
	}
	
	public void addAppConn(App a) {
		apps.put(a.getId(), a);
		a.setCluster(this);
	}

	public String toString() {
		return name + "; " + "Gateways: " + gateways.keySet() + "; " + "Apps:" + apps.keySet();
	}

	public String getInfo(){
		return null;
	}
	// Basic Setters and Getters for Gateway
	
	public Map<Integer,Integer> getGwResourcesCount(){
		Map<Integer,Integer> gwResCnt=new HashMap<>();
		for (Integer a:getApps().keySet()){
			for (Integer r: getApps().get(a).getResources().keySet()){
				 Integer id = getApps().get(a).getResources().get(r).getGateway().getId();
				 if (gwResCnt.get(id)==null){
					 gwResCnt.put(id, 1);
				 }
				 else{
					 gwResCnt.put(id,gwResCnt.get(id)+1); 
				 }
			}
		}		
		return gwResCnt;	
	}
	public Map<Integer, Gateway> getGateways() {
		return gateways;
	}

	public Map<Integer, Float> getGatewayShare() {
		return gatewayShare;
	}
	public Map<Integer, Float> getShareLoad() {
		return shareLoad;
	}

	
	public void setGateways(Map<Integer, Gateway> gateways) {
		this.gateways = gateways;
	}

	public Map<Integer, App> getApps() {
		return apps;
	}

	public void setApps(Map<Integer, App> apps) {
		this.apps = apps;
	}

	public int getId() {
		// TODO Auto-generated method stub
		return id;
	}
}
